
Codebreakers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000b0e  00000ba2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  0080010e  0080010e  00000bb0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e8  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e4  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a52  00000000  00000000  000017c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000480  00000000  00000000  00002218  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000406  00000000  00000000  00002698  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009c0  00000000  00000000  00002a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  0000345e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>
   2:	00 00       	nop
   4:	a5 c0       	rjmp	.+330    	; 0x150 <__bad_interrupt>
   6:	00 00       	nop
   8:	a3 c0       	rjmp	.+326    	; 0x150 <__bad_interrupt>
   a:	00 00       	nop
   c:	a1 c0       	rjmp	.+322    	; 0x150 <__bad_interrupt>
   e:	00 00       	nop
  10:	9f c0       	rjmp	.+318    	; 0x150 <__bad_interrupt>
  12:	00 00       	nop
  14:	9d c0       	rjmp	.+314    	; 0x150 <__bad_interrupt>
  16:	00 00       	nop
  18:	9b c0       	rjmp	.+310    	; 0x150 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	99 c0       	rjmp	.+306    	; 0x150 <__bad_interrupt>
  1e:	00 00       	nop
  20:	97 c0       	rjmp	.+302    	; 0x150 <__bad_interrupt>
  22:	00 00       	nop
  24:	95 c0       	rjmp	.+298    	; 0x150 <__bad_interrupt>
  26:	00 00       	nop
  28:	93 c0       	rjmp	.+294    	; 0x150 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	91 c0       	rjmp	.+290    	; 0x150 <__bad_interrupt>
  2e:	00 00       	nop
  30:	8f c0       	rjmp	.+286    	; 0x150 <__bad_interrupt>
  32:	00 00       	nop
  34:	de c2       	rjmp	.+1468   	; 0x5f2 <__vector_13>
  36:	00 00       	nop
  38:	8b c0       	rjmp	.+278    	; 0x150 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	89 c0       	rjmp	.+274    	; 0x150 <__bad_interrupt>
  3e:	00 00       	nop
  40:	87 c0       	rjmp	.+270    	; 0x150 <__bad_interrupt>
  42:	00 00       	nop
  44:	85 c0       	rjmp	.+266    	; 0x150 <__bad_interrupt>
  46:	00 00       	nop
  48:	83 c0       	rjmp	.+262    	; 0x150 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	81 c0       	rjmp	.+258    	; 0x150 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7f c0       	rjmp	.+254    	; 0x150 <__bad_interrupt>
  52:	00 00       	nop
  54:	7d c0       	rjmp	.+250    	; 0x150 <__bad_interrupt>
  56:	00 00       	nop
  58:	7b c0       	rjmp	.+246    	; 0x150 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	79 c0       	rjmp	.+242    	; 0x150 <__bad_interrupt>
  5e:	00 00       	nop
  60:	77 c0       	rjmp	.+238    	; 0x150 <__bad_interrupt>
  62:	00 00       	nop
  64:	75 c0       	rjmp	.+234    	; 0x150 <__bad_interrupt>
  66:	00 00       	nop
  68:	73 c0       	rjmp	.+230    	; 0x150 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	71 c0       	rjmp	.+226    	; 0x150 <__bad_interrupt>
  6e:	00 00       	nop
  70:	6f c0       	rjmp	.+222    	; 0x150 <__bad_interrupt>
  72:	00 00       	nop
  74:	6d c0       	rjmp	.+218    	; 0x150 <__bad_interrupt>
  76:	00 00       	nop
  78:	6b c0       	rjmp	.+214    	; 0x150 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	69 c0       	rjmp	.+210    	; 0x150 <__bad_interrupt>
  7e:	00 00       	nop
  80:	67 c0       	rjmp	.+206    	; 0x150 <__bad_interrupt>
  82:	00 00       	nop
  84:	65 c0       	rjmp	.+202    	; 0x150 <__bad_interrupt>
  86:	00 00       	nop
  88:	63 c0       	rjmp	.+198    	; 0x150 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ae 03       	fmulsu	r18, r22
  8e:	14 04       	cpc	r1, r4
  90:	14 04       	cpc	r1, r4
  92:	14 04       	cpc	r1, r4
  94:	14 04       	cpc	r1, r4
  96:	14 04       	cpc	r1, r4
  98:	14 04       	cpc	r1, r4
  9a:	14 04       	cpc	r1, r4
  9c:	14 04       	cpc	r1, r4
  9e:	14 04       	cpc	r1, r4
  a0:	14 04       	cpc	r1, r4
  a2:	14 04       	cpc	r1, r4
  a4:	14 04       	cpc	r1, r4
  a6:	14 04       	cpc	r1, r4
  a8:	14 04       	cpc	r1, r4
  aa:	14 04       	cpc	r1, r4
  ac:	14 04       	cpc	r1, r4
  ae:	14 04       	cpc	r1, r4
  b0:	14 04       	cpc	r1, r4
  b2:	14 04       	cpc	r1, r4
  b4:	14 04       	cpc	r1, r4
  b6:	14 04       	cpc	r1, r4
  b8:	14 04       	cpc	r1, r4
  ba:	14 04       	cpc	r1, r4
  bc:	14 04       	cpc	r1, r4
  be:	14 04       	cpc	r1, r4
  c0:	14 04       	cpc	r1, r4
  c2:	14 04       	cpc	r1, r4
  c4:	14 04       	cpc	r1, r4
  c6:	14 04       	cpc	r1, r4
  c8:	14 04       	cpc	r1, r4
  ca:	14 04       	cpc	r1, r4
  cc:	14 04       	cpc	r1, r4
  ce:	14 04       	cpc	r1, r4
  d0:	14 04       	cpc	r1, r4
  d2:	0e 04       	cpc	r0, r14
  d4:	14 04       	cpc	r1, r4
  d6:	14 04       	cpc	r1, r4
  d8:	14 04       	cpc	r1, r4
  da:	14 04       	cpc	r1, r4
  dc:	14 04       	cpc	r1, r4
  de:	14 04       	cpc	r1, r4
  e0:	02 04       	cpc	r0, r2
  e2:	14 04       	cpc	r1, r4
  e4:	14 04       	cpc	r1, r4
  e6:	14 04       	cpc	r1, r4
  e8:	14 04       	cpc	r1, r4
  ea:	14 04       	cpc	r1, r4
  ec:	08 04       	cpc	r0, r8
  ee:	b4 03       	fmuls	r19, r20
  f0:	ba 03       	fmulsu	r19, r18
  f2:	c0 03       	fmuls	r20, r16
  f4:	c6 03       	fmuls	r20, r22
  f6:	cc 03       	fmulsu	r20, r20
  f8:	d2 03       	fmuls	r21, r18
  fa:	d8 03       	fmulsu	r21, r16
  fc:	de 03       	fmulsu	r21, r22
  fe:	e4 03       	fmuls	r22, r20
 100:	14 04       	cpc	r1, r4
 102:	14 04       	cpc	r1, r4
 104:	14 04       	cpc	r1, r4
 106:	14 04       	cpc	r1, r4
 108:	14 04       	cpc	r1, r4
 10a:	14 04       	cpc	r1, r4
 10c:	14 04       	cpc	r1, r4
 10e:	ea 03       	fmulsu	r22, r18
 110:	f0 03       	fmuls	r23, r16
 112:	f6 03       	fmuls	r23, r22
 114:	fc 03       	fmulsu	r23, r20

00000116 <__ctors_end>:
 116:	11 24       	eor	r1, r1
 118:	1f be       	out	0x3f, r1	; 63
 11a:	cf ef       	ldi	r28, 0xFF	; 255
 11c:	d0 e4       	ldi	r29, 0x40	; 64
 11e:	de bf       	out	0x3e, r29	; 62
 120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
 122:	11 e0       	ldi	r17, 0x01	; 1
 124:	a0 e0       	ldi	r26, 0x00	; 0
 126:	b1 e0       	ldi	r27, 0x01	; 1
 128:	ee e0       	ldi	r30, 0x0E	; 14
 12a:	fb e0       	ldi	r31, 0x0B	; 11
 12c:	00 e0       	ldi	r16, 0x00	; 0
 12e:	0b bf       	out	0x3b, r16	; 59
 130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
 132:	07 90       	elpm	r0, Z+
 134:	0d 92       	st	X+, r0
 136:	ae 30       	cpi	r26, 0x0E	; 14
 138:	b1 07       	cpc	r27, r17
 13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	ae e0       	ldi	r26, 0x0E	; 14
 140:	b1 e0       	ldi	r27, 0x01	; 1
 142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
 144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
 146:	ad 32       	cpi	r26, 0x2D	; 45
 148:	b2 07       	cpc	r27, r18
 14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
 14c:	94 d3       	rcall	.+1832   	; 0x876 <main>
 14e:	dd c4       	rjmp	.+2490   	; 0xb0a <_exit>

00000150 <__bad_interrupt>:
 150:	57 cf       	rjmp	.-338    	; 0x0 <__vectors>

00000152 <SetBit>:
		{
			key[i] = allKeypad[rand() % 15];
		}
	}
	return key;
}
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	00 d0       	rcall	.+0      	; 0x158 <SetBit+0x6>
 158:	1f 92       	push	r1
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
 15e:	89 83       	std	Y+1, r24	; 0x01
 160:	6a 83       	std	Y+2, r22	; 0x02
 162:	4b 83       	std	Y+3, r20	; 0x03
 164:	8b 81       	ldd	r24, Y+3	; 0x03
 166:	88 23       	and	r24, r24
 168:	79 f0       	breq	.+30     	; 0x188 <SetBit+0x36>
 16a:	8a 81       	ldd	r24, Y+2	; 0x02
 16c:	28 2f       	mov	r18, r24
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 2e       	mov	r0, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <SetBit+0x2a>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <SetBit+0x26>
 180:	98 2f       	mov	r25, r24
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	89 2b       	or	r24, r25
 186:	0f c0       	rjmp	.+30     	; 0x1a6 <SetBit+0x54>
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	28 2f       	mov	r18, r24
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 2e       	mov	r0, r18
 194:	02 c0       	rjmp	.+4      	; 0x19a <SetBit+0x48>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	0a 94       	dec	r0
 19c:	e2 f7       	brpl	.-8      	; 0x196 <SetBit+0x44>
 19e:	98 2f       	mov	r25, r24
 1a0:	90 95       	com	r25
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	89 23       	and	r24, r25
 1a6:	0f 90       	pop	r0
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <GetBit>:
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	00 d0       	rcall	.+0      	; 0x1b8 <GetBit+0x6>
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
 1bc:	89 83       	std	Y+1, r24	; 0x01
 1be:	6a 83       	std	Y+2, r22	; 0x02
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	88 2f       	mov	r24, r24
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	2a 81       	ldd	r18, Y+2	; 0x02
 1c8:	22 2f       	mov	r18, r18
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <GetBit+0x20>
 1ce:	95 95       	asr	r25
 1d0:	87 95       	ror	r24
 1d2:	2a 95       	dec	r18
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <GetBit+0x1c>
 1d6:	81 70       	andi	r24, 0x01	; 1
 1d8:	99 27       	eor	r25, r25
 1da:	21 e0       	ldi	r18, 0x01	; 1
 1dc:	00 97       	sbiw	r24, 0x00	; 0
 1de:	09 f4       	brne	.+2      	; 0x1e2 <GetBit+0x30>
 1e0:	20 e0       	ldi	r18, 0x00	; 0
 1e2:	82 2f       	mov	r24, r18
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <LCD_init>:
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62
 1f6:	84 e6       	ldi	r24, 0x64	; 100
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	7e d0       	rcall	.+252    	; 0x2f8 <delay_ms>
 1fc:	88 e3       	ldi	r24, 0x38	; 56
 1fe:	0c d0       	rcall	.+24     	; 0x218 <LCD_WriteCommand>
 200:	86 e0       	ldi	r24, 0x06	; 6
 202:	0a d0       	rcall	.+20     	; 0x218 <LCD_WriteCommand>
 204:	8f e0       	ldi	r24, 0x0F	; 15
 206:	08 d0       	rcall	.+16     	; 0x218 <LCD_WriteCommand>
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	06 d0       	rcall	.+12     	; 0x218 <LCD_WriteCommand>
 20c:	8a e0       	ldi	r24, 0x0A	; 10
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	73 d0       	rcall	.+230    	; 0x2f8 <delay_ms>
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <LCD_WriteCommand>:
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	1f 92       	push	r1
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	89 83       	std	Y+1, r24	; 0x01
 224:	82 e2       	ldi	r24, 0x22	; 34
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	22 e2       	ldi	r18, 0x22	; 34
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	f9 01       	movw	r30, r18
 22e:	20 81       	ld	r18, Z
 230:	2e 7f       	andi	r18, 0xFE	; 254
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18
 236:	8b e2       	ldi	r24, 0x2B	; 43
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	29 81       	ldd	r18, Y+1	; 0x01
 23c:	fc 01       	movw	r30, r24
 23e:	20 83       	st	Z, r18
 240:	82 e2       	ldi	r24, 0x22	; 34
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	22 e2       	ldi	r18, 0x22	; 34
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	f9 01       	movw	r30, r18
 24a:	20 81       	ld	r18, Z
 24c:	22 60       	ori	r18, 0x02	; 2
 24e:	fc 01       	movw	r30, r24
 250:	20 83       	st	Z, r18
 252:	00 00       	nop
 254:	82 e2       	ldi	r24, 0x22	; 34
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	22 e2       	ldi	r18, 0x22	; 34
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	f9 01       	movw	r30, r18
 25e:	20 81       	ld	r18, Z
 260:	2d 7f       	andi	r18, 0xFD	; 253
 262:	fc 01       	movw	r30, r24
 264:	20 83       	st	Z, r18
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	46 d0       	rcall	.+140    	; 0x2f8 <delay_ms>
 26c:	0f 90       	pop	r0
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <LCD_WriteData>:
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	1f 92       	push	r1
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	82 e2       	ldi	r24, 0x22	; 34
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	22 e2       	ldi	r18, 0x22	; 34
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	f9 01       	movw	r30, r18
 28a:	20 81       	ld	r18, Z
 28c:	21 60       	ori	r18, 0x01	; 1
 28e:	fc 01       	movw	r30, r24
 290:	20 83       	st	Z, r18
 292:	8b e2       	ldi	r24, 0x2B	; 43
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	29 81       	ldd	r18, Y+1	; 0x01
 298:	fc 01       	movw	r30, r24
 29a:	20 83       	st	Z, r18
 29c:	82 e2       	ldi	r24, 0x22	; 34
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	22 e2       	ldi	r18, 0x22	; 34
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	f9 01       	movw	r30, r18
 2a6:	20 81       	ld	r18, Z
 2a8:	22 60       	ori	r18, 0x02	; 2
 2aa:	fc 01       	movw	r30, r24
 2ac:	20 83       	st	Z, r18
 2ae:	00 00       	nop
 2b0:	82 e2       	ldi	r24, 0x22	; 34
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	22 e2       	ldi	r18, 0x22	; 34
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	f9 01       	movw	r30, r18
 2ba:	20 81       	ld	r18, Z
 2bc:	2d 7f       	andi	r18, 0xFD	; 253
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	18 d0       	rcall	.+48     	; 0x2f8 <delay_ms>
 2c8:	0f 90       	pop	r0
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <LCD_Cursor>:
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	1f 92       	push	r1
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
 2da:	89 83       	std	Y+1, r24	; 0x01
 2dc:	89 81       	ldd	r24, Y+1	; 0x01
 2de:	81 31       	cpi	r24, 0x11	; 17
 2e0:	20 f4       	brcc	.+8      	; 0x2ea <LCD_Cursor+0x1a>
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	81 58       	subi	r24, 0x81	; 129
 2e6:	98 df       	rcall	.-208    	; 0x218 <LCD_WriteCommand>
 2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <LCD_Cursor+0x20>
 2ea:	89 81       	ldd	r24, Y+1	; 0x01
 2ec:	81 55       	subi	r24, 0x51	; 81
 2ee:	94 df       	rcall	.-216    	; 0x218 <LCD_WriteCommand>
 2f0:	0f 90       	pop	r0
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <delay_ms>:
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	00 d0       	rcall	.+0      	; 0x2fe <delay_ms+0x6>
 2fe:	00 d0       	rcall	.+0      	; 0x300 <delay_ms+0x8>
 300:	00 d0       	rcall	.+0      	; 0x302 <delay_ms+0xa>
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	9e 83       	std	Y+6, r25	; 0x06
 308:	8d 83       	std	Y+5, r24	; 0x05
 30a:	1a 82       	std	Y+2, r1	; 0x02
 30c:	19 82       	std	Y+1, r1	; 0x01
 30e:	14 c0       	rjmp	.+40     	; 0x338 <delay_ms+0x40>
 310:	1c 82       	std	Y+4, r1	; 0x04
 312:	1b 82       	std	Y+3, r1	; 0x03
 314:	06 c0       	rjmp	.+12     	; 0x322 <delay_ms+0x2a>
 316:	00 00       	nop
 318:	8b 81       	ldd	r24, Y+3	; 0x03
 31a:	9c 81       	ldd	r25, Y+4	; 0x04
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	9c 83       	std	Y+4, r25	; 0x04
 320:	8b 83       	std	Y+3, r24	; 0x03
 322:	8b 81       	ldd	r24, Y+3	; 0x03
 324:	9c 81       	ldd	r25, Y+4	; 0x04
 326:	87 30       	cpi	r24, 0x07	; 7
 328:	23 e0       	ldi	r18, 0x03	; 3
 32a:	92 07       	cpc	r25, r18
 32c:	a4 f3       	brlt	.-24     	; 0x316 <delay_ms+0x1e>
 32e:	89 81       	ldd	r24, Y+1	; 0x01
 330:	9a 81       	ldd	r25, Y+2	; 0x02
 332:	01 96       	adiw	r24, 0x01	; 1
 334:	9a 83       	std	Y+2, r25	; 0x02
 336:	89 83       	std	Y+1, r24	; 0x01
 338:	29 81       	ldd	r18, Y+1	; 0x01
 33a:	3a 81       	ldd	r19, Y+2	; 0x02
 33c:	8d 81       	ldd	r24, Y+5	; 0x05
 33e:	9e 81       	ldd	r25, Y+6	; 0x06
 340:	28 17       	cp	r18, r24
 342:	39 07       	cpc	r19, r25
 344:	2c f3       	brlt	.-54     	; 0x310 <delay_ms+0x18>
 346:	26 96       	adiw	r28, 0x06	; 6
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	f8 94       	cli
 34c:	de bf       	out	0x3e, r29	; 62
 34e:	0f be       	out	0x3f, r0	; 63
 350:	cd bf       	out	0x3d, r28	; 61
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	08 95       	ret

00000358 <GetKeypadKey>:
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
 364:	08 e2       	ldi	r16, 0x28	; 40
 366:	10 e0       	ldi	r17, 0x00	; 0
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	64 e0       	ldi	r22, 0x04	; 4
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	f1 de       	rcall	.-542    	; 0x152 <SetBit>
 370:	f8 01       	movw	r30, r16
 372:	80 83       	st	Z, r24
 374:	00 00       	nop
 376:	86 e2       	ldi	r24, 0x26	; 38
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	fc 01       	movw	r30, r24
 37c:	80 81       	ld	r24, Z
 37e:	80 95       	com	r24
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	17 df       	rcall	.-466    	; 0x1b2 <GetBit>
 384:	88 23       	and	r24, r24
 386:	11 f0       	breq	.+4      	; 0x38c <GetKeypadKey+0x34>
 388:	81 e3       	ldi	r24, 0x31	; 49
 38a:	c1 c0       	rjmp	.+386    	; 0x50e <GetKeypadKey+0x1b6>
 38c:	86 e2       	ldi	r24, 0x26	; 38
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	fc 01       	movw	r30, r24
 392:	80 81       	ld	r24, Z
 394:	80 95       	com	r24
 396:	61 e0       	ldi	r22, 0x01	; 1
 398:	0c df       	rcall	.-488    	; 0x1b2 <GetBit>
 39a:	88 23       	and	r24, r24
 39c:	11 f0       	breq	.+4      	; 0x3a2 <GetKeypadKey+0x4a>
 39e:	84 e3       	ldi	r24, 0x34	; 52
 3a0:	b6 c0       	rjmp	.+364    	; 0x50e <GetKeypadKey+0x1b6>
 3a2:	86 e2       	ldi	r24, 0x26	; 38
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	fc 01       	movw	r30, r24
 3a8:	80 81       	ld	r24, Z
 3aa:	80 95       	com	r24
 3ac:	62 e0       	ldi	r22, 0x02	; 2
 3ae:	01 df       	rcall	.-510    	; 0x1b2 <GetBit>
 3b0:	88 23       	and	r24, r24
 3b2:	11 f0       	breq	.+4      	; 0x3b8 <GetKeypadKey+0x60>
 3b4:	87 e3       	ldi	r24, 0x37	; 55
 3b6:	ab c0       	rjmp	.+342    	; 0x50e <GetKeypadKey+0x1b6>
 3b8:	86 e2       	ldi	r24, 0x26	; 38
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	fc 01       	movw	r30, r24
 3be:	80 81       	ld	r24, Z
 3c0:	80 95       	com	r24
 3c2:	63 e0       	ldi	r22, 0x03	; 3
 3c4:	f6 de       	rcall	.-532    	; 0x1b2 <GetBit>
 3c6:	88 23       	and	r24, r24
 3c8:	11 f0       	breq	.+4      	; 0x3ce <GetKeypadKey+0x76>
 3ca:	8a e2       	ldi	r24, 0x2A	; 42
 3cc:	a0 c0       	rjmp	.+320    	; 0x50e <GetKeypadKey+0x1b6>
 3ce:	08 e2       	ldi	r16, 0x28	; 40
 3d0:	10 e0       	ldi	r17, 0x00	; 0
 3d2:	40 e0       	ldi	r20, 0x00	; 0
 3d4:	65 e0       	ldi	r22, 0x05	; 5
 3d6:	8f ef       	ldi	r24, 0xFF	; 255
 3d8:	bc de       	rcall	.-648    	; 0x152 <SetBit>
 3da:	f8 01       	movw	r30, r16
 3dc:	80 83       	st	Z, r24
 3de:	00 00       	nop
 3e0:	86 e2       	ldi	r24, 0x26	; 38
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	fc 01       	movw	r30, r24
 3e6:	80 81       	ld	r24, Z
 3e8:	80 95       	com	r24
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	e2 de       	rcall	.-572    	; 0x1b2 <GetBit>
 3ee:	88 23       	and	r24, r24
 3f0:	11 f0       	breq	.+4      	; 0x3f6 <GetKeypadKey+0x9e>
 3f2:	82 e3       	ldi	r24, 0x32	; 50
 3f4:	8c c0       	rjmp	.+280    	; 0x50e <GetKeypadKey+0x1b6>
 3f6:	86 e2       	ldi	r24, 0x26	; 38
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	fc 01       	movw	r30, r24
 3fc:	80 81       	ld	r24, Z
 3fe:	80 95       	com	r24
 400:	61 e0       	ldi	r22, 0x01	; 1
 402:	d7 de       	rcall	.-594    	; 0x1b2 <GetBit>
 404:	88 23       	and	r24, r24
 406:	11 f0       	breq	.+4      	; 0x40c <GetKeypadKey+0xb4>
 408:	85 e3       	ldi	r24, 0x35	; 53
 40a:	81 c0       	rjmp	.+258    	; 0x50e <GetKeypadKey+0x1b6>
 40c:	86 e2       	ldi	r24, 0x26	; 38
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	fc 01       	movw	r30, r24
 412:	80 81       	ld	r24, Z
 414:	80 95       	com	r24
 416:	62 e0       	ldi	r22, 0x02	; 2
 418:	cc de       	rcall	.-616    	; 0x1b2 <GetBit>
 41a:	88 23       	and	r24, r24
 41c:	11 f0       	breq	.+4      	; 0x422 <GetKeypadKey+0xca>
 41e:	88 e3       	ldi	r24, 0x38	; 56
 420:	76 c0       	rjmp	.+236    	; 0x50e <GetKeypadKey+0x1b6>
 422:	86 e2       	ldi	r24, 0x26	; 38
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	fc 01       	movw	r30, r24
 428:	80 81       	ld	r24, Z
 42a:	80 95       	com	r24
 42c:	63 e0       	ldi	r22, 0x03	; 3
 42e:	c1 de       	rcall	.-638    	; 0x1b2 <GetBit>
 430:	88 23       	and	r24, r24
 432:	11 f0       	breq	.+4      	; 0x438 <GetKeypadKey+0xe0>
 434:	80 e3       	ldi	r24, 0x30	; 48
 436:	6b c0       	rjmp	.+214    	; 0x50e <GetKeypadKey+0x1b6>
 438:	08 e2       	ldi	r16, 0x28	; 40
 43a:	10 e0       	ldi	r17, 0x00	; 0
 43c:	40 e0       	ldi	r20, 0x00	; 0
 43e:	66 e0       	ldi	r22, 0x06	; 6
 440:	8f ef       	ldi	r24, 0xFF	; 255
 442:	87 de       	rcall	.-754    	; 0x152 <SetBit>
 444:	f8 01       	movw	r30, r16
 446:	80 83       	st	Z, r24
 448:	00 00       	nop
 44a:	86 e2       	ldi	r24, 0x26	; 38
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	fc 01       	movw	r30, r24
 450:	80 81       	ld	r24, Z
 452:	80 95       	com	r24
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	ad de       	rcall	.-678    	; 0x1b2 <GetBit>
 458:	88 23       	and	r24, r24
 45a:	11 f0       	breq	.+4      	; 0x460 <GetKeypadKey+0x108>
 45c:	83 e3       	ldi	r24, 0x33	; 51
 45e:	57 c0       	rjmp	.+174    	; 0x50e <GetKeypadKey+0x1b6>
 460:	86 e2       	ldi	r24, 0x26	; 38
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	fc 01       	movw	r30, r24
 466:	80 81       	ld	r24, Z
 468:	80 95       	com	r24
 46a:	61 e0       	ldi	r22, 0x01	; 1
 46c:	a2 de       	rcall	.-700    	; 0x1b2 <GetBit>
 46e:	88 23       	and	r24, r24
 470:	11 f0       	breq	.+4      	; 0x476 <GetKeypadKey+0x11e>
 472:	86 e3       	ldi	r24, 0x36	; 54
 474:	4c c0       	rjmp	.+152    	; 0x50e <GetKeypadKey+0x1b6>
 476:	86 e2       	ldi	r24, 0x26	; 38
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	fc 01       	movw	r30, r24
 47c:	80 81       	ld	r24, Z
 47e:	80 95       	com	r24
 480:	62 e0       	ldi	r22, 0x02	; 2
 482:	97 de       	rcall	.-722    	; 0x1b2 <GetBit>
 484:	88 23       	and	r24, r24
 486:	11 f0       	breq	.+4      	; 0x48c <GetKeypadKey+0x134>
 488:	89 e3       	ldi	r24, 0x39	; 57
 48a:	41 c0       	rjmp	.+130    	; 0x50e <GetKeypadKey+0x1b6>
 48c:	86 e2       	ldi	r24, 0x26	; 38
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	fc 01       	movw	r30, r24
 492:	80 81       	ld	r24, Z
 494:	80 95       	com	r24
 496:	63 e0       	ldi	r22, 0x03	; 3
 498:	8c de       	rcall	.-744    	; 0x1b2 <GetBit>
 49a:	88 23       	and	r24, r24
 49c:	11 f0       	breq	.+4      	; 0x4a2 <GetKeypadKey+0x14a>
 49e:	83 e2       	ldi	r24, 0x23	; 35
 4a0:	36 c0       	rjmp	.+108    	; 0x50e <GetKeypadKey+0x1b6>
 4a2:	08 e2       	ldi	r16, 0x28	; 40
 4a4:	10 e0       	ldi	r17, 0x00	; 0
 4a6:	40 e0       	ldi	r20, 0x00	; 0
 4a8:	67 e0       	ldi	r22, 0x07	; 7
 4aa:	8f ef       	ldi	r24, 0xFF	; 255
 4ac:	52 de       	rcall	.-860    	; 0x152 <SetBit>
 4ae:	f8 01       	movw	r30, r16
 4b0:	80 83       	st	Z, r24
 4b2:	00 00       	nop
 4b4:	86 e2       	ldi	r24, 0x26	; 38
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	fc 01       	movw	r30, r24
 4ba:	80 81       	ld	r24, Z
 4bc:	80 95       	com	r24
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	78 de       	rcall	.-784    	; 0x1b2 <GetBit>
 4c2:	88 23       	and	r24, r24
 4c4:	11 f0       	breq	.+4      	; 0x4ca <GetKeypadKey+0x172>
 4c6:	81 e4       	ldi	r24, 0x41	; 65
 4c8:	22 c0       	rjmp	.+68     	; 0x50e <GetKeypadKey+0x1b6>
 4ca:	86 e2       	ldi	r24, 0x26	; 38
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	fc 01       	movw	r30, r24
 4d0:	80 81       	ld	r24, Z
 4d2:	80 95       	com	r24
 4d4:	61 e0       	ldi	r22, 0x01	; 1
 4d6:	6d de       	rcall	.-806    	; 0x1b2 <GetBit>
 4d8:	88 23       	and	r24, r24
 4da:	11 f0       	breq	.+4      	; 0x4e0 <GetKeypadKey+0x188>
 4dc:	82 e4       	ldi	r24, 0x42	; 66
 4de:	17 c0       	rjmp	.+46     	; 0x50e <GetKeypadKey+0x1b6>
 4e0:	86 e2       	ldi	r24, 0x26	; 38
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	fc 01       	movw	r30, r24
 4e6:	80 81       	ld	r24, Z
 4e8:	80 95       	com	r24
 4ea:	62 e0       	ldi	r22, 0x02	; 2
 4ec:	62 de       	rcall	.-828    	; 0x1b2 <GetBit>
 4ee:	88 23       	and	r24, r24
 4f0:	11 f0       	breq	.+4      	; 0x4f6 <GetKeypadKey+0x19e>
 4f2:	83 e4       	ldi	r24, 0x43	; 67
 4f4:	0c c0       	rjmp	.+24     	; 0x50e <GetKeypadKey+0x1b6>
 4f6:	86 e2       	ldi	r24, 0x26	; 38
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	fc 01       	movw	r30, r24
 4fc:	80 81       	ld	r24, Z
 4fe:	80 95       	com	r24
 500:	63 e0       	ldi	r22, 0x03	; 3
 502:	57 de       	rcall	.-850    	; 0x1b2 <GetBit>
 504:	88 23       	and	r24, r24
 506:	11 f0       	breq	.+4      	; 0x50c <GetKeypadKey+0x1b4>
 508:	84 e4       	ldi	r24, 0x44	; 68
 50a:	01 c0       	rjmp	.+2      	; 0x50e <GetKeypadKey+0x1b6>
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	df 91       	pop	r29
 510:	cf 91       	pop	r28
 512:	1f 91       	pop	r17
 514:	0f 91       	pop	r16
 516:	08 95       	ret

00000518 <TimerSet>:
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	00 d0       	rcall	.+0      	; 0x51e <TimerSet+0x6>
 51e:	00 d0       	rcall	.+0      	; 0x520 <TimerSet+0x8>
 520:	cd b7       	in	r28, 0x3d	; 61
 522:	de b7       	in	r29, 0x3e	; 62
 524:	69 83       	std	Y+1, r22	; 0x01
 526:	7a 83       	std	Y+2, r23	; 0x02
 528:	8b 83       	std	Y+3, r24	; 0x03
 52a:	9c 83       	std	Y+4, r25	; 0x04
 52c:	89 81       	ldd	r24, Y+1	; 0x01
 52e:	9a 81       	ldd	r25, Y+2	; 0x02
 530:	ab 81       	ldd	r26, Y+3	; 0x03
 532:	bc 81       	ldd	r27, Y+4	; 0x04
 534:	80 93 0a 01 	sts	0x010A, r24
 538:	90 93 0b 01 	sts	0x010B, r25
 53c:	a0 93 0c 01 	sts	0x010C, r26
 540:	b0 93 0d 01 	sts	0x010D, r27
 544:	80 91 0a 01 	lds	r24, 0x010A
 548:	90 91 0b 01 	lds	r25, 0x010B
 54c:	a0 91 0c 01 	lds	r26, 0x010C
 550:	b0 91 0d 01 	lds	r27, 0x010D
 554:	80 93 0f 01 	sts	0x010F, r24
 558:	90 93 10 01 	sts	0x0110, r25
 55c:	a0 93 11 01 	sts	0x0111, r26
 560:	b0 93 12 01 	sts	0x0112, r27
 564:	0f 90       	pop	r0
 566:	0f 90       	pop	r0
 568:	0f 90       	pop	r0
 56a:	0f 90       	pop	r0
 56c:	df 91       	pop	r29
 56e:	cf 91       	pop	r28
 570:	08 95       	ret

00000572 <TimerOn>:
 572:	cf 93       	push	r28
 574:	df 93       	push	r29
 576:	cd b7       	in	r28, 0x3d	; 61
 578:	de b7       	in	r29, 0x3e	; 62
 57a:	81 e8       	ldi	r24, 0x81	; 129
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	2b e0       	ldi	r18, 0x0B	; 11
 580:	fc 01       	movw	r30, r24
 582:	20 83       	st	Z, r18
 584:	88 e8       	ldi	r24, 0x88	; 136
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	2d e7       	ldi	r18, 0x7D	; 125
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	fc 01       	movw	r30, r24
 58e:	31 83       	std	Z+1, r19	; 0x01
 590:	20 83       	st	Z, r18
 592:	8f e6       	ldi	r24, 0x6F	; 111
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	22 e0       	ldi	r18, 0x02	; 2
 598:	fc 01       	movw	r30, r24
 59a:	20 83       	st	Z, r18
 59c:	84 e8       	ldi	r24, 0x84	; 132
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	fc 01       	movw	r30, r24
 5a2:	11 82       	std	Z+1, r1	; 0x01
 5a4:	10 82       	st	Z, r1
 5a6:	80 91 0a 01 	lds	r24, 0x010A
 5aa:	90 91 0b 01 	lds	r25, 0x010B
 5ae:	a0 91 0c 01 	lds	r26, 0x010C
 5b2:	b0 91 0d 01 	lds	r27, 0x010D
 5b6:	80 93 0f 01 	sts	0x010F, r24
 5ba:	90 93 10 01 	sts	0x0110, r25
 5be:	a0 93 11 01 	sts	0x0111, r26
 5c2:	b0 93 12 01 	sts	0x0112, r27
 5c6:	8f e5       	ldi	r24, 0x5F	; 95
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	2f e5       	ldi	r18, 0x5F	; 95
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	f9 01       	movw	r30, r18
 5d0:	20 81       	ld	r18, Z
 5d2:	20 68       	ori	r18, 0x80	; 128
 5d4:	fc 01       	movw	r30, r24
 5d6:	20 83       	st	Z, r18
 5d8:	df 91       	pop	r29
 5da:	cf 91       	pop	r28
 5dc:	08 95       	ret

000005de <TimerISR>:
 5de:	cf 93       	push	r28
 5e0:	df 93       	push	r29
 5e2:	cd b7       	in	r28, 0x3d	; 61
 5e4:	de b7       	in	r29, 0x3e	; 62
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	80 93 0e 01 	sts	0x010E, r24
 5ec:	df 91       	pop	r29
 5ee:	cf 91       	pop	r28
 5f0:	08 95       	ret

000005f2 <__vector_13>:
 5f2:	1f 92       	push	r1
 5f4:	0f 92       	push	r0
 5f6:	00 90 5f 00 	lds	r0, 0x005F
 5fa:	0f 92       	push	r0
 5fc:	11 24       	eor	r1, r1
 5fe:	00 90 5b 00 	lds	r0, 0x005B
 602:	0f 92       	push	r0
 604:	2f 93       	push	r18
 606:	3f 93       	push	r19
 608:	4f 93       	push	r20
 60a:	5f 93       	push	r21
 60c:	6f 93       	push	r22
 60e:	7f 93       	push	r23
 610:	8f 93       	push	r24
 612:	9f 93       	push	r25
 614:	af 93       	push	r26
 616:	bf 93       	push	r27
 618:	ef 93       	push	r30
 61a:	ff 93       	push	r31
 61c:	cf 93       	push	r28
 61e:	df 93       	push	r29
 620:	cd b7       	in	r28, 0x3d	; 61
 622:	de b7       	in	r29, 0x3e	; 62
 624:	80 91 0f 01 	lds	r24, 0x010F
 628:	90 91 10 01 	lds	r25, 0x0110
 62c:	a0 91 11 01 	lds	r26, 0x0111
 630:	b0 91 12 01 	lds	r27, 0x0112
 634:	01 97       	sbiw	r24, 0x01	; 1
 636:	a1 09       	sbc	r26, r1
 638:	b1 09       	sbc	r27, r1
 63a:	80 93 0f 01 	sts	0x010F, r24
 63e:	90 93 10 01 	sts	0x0110, r25
 642:	a0 93 11 01 	sts	0x0111, r26
 646:	b0 93 12 01 	sts	0x0112, r27
 64a:	80 91 0f 01 	lds	r24, 0x010F
 64e:	90 91 10 01 	lds	r25, 0x0110
 652:	a0 91 11 01 	lds	r26, 0x0111
 656:	b0 91 12 01 	lds	r27, 0x0112
 65a:	00 97       	sbiw	r24, 0x00	; 0
 65c:	a1 05       	cpc	r26, r1
 65e:	b1 05       	cpc	r27, r1
 660:	89 f4       	brne	.+34     	; 0x684 <__vector_13+0x92>
 662:	bd df       	rcall	.-134    	; 0x5de <TimerISR>
 664:	80 91 0a 01 	lds	r24, 0x010A
 668:	90 91 0b 01 	lds	r25, 0x010B
 66c:	a0 91 0c 01 	lds	r26, 0x010C
 670:	b0 91 0d 01 	lds	r27, 0x010D
 674:	80 93 0f 01 	sts	0x010F, r24
 678:	90 93 10 01 	sts	0x0110, r25
 67c:	a0 93 11 01 	sts	0x0111, r26
 680:	b0 93 12 01 	sts	0x0112, r27
 684:	df 91       	pop	r29
 686:	cf 91       	pop	r28
 688:	ff 91       	pop	r31
 68a:	ef 91       	pop	r30
 68c:	bf 91       	pop	r27
 68e:	af 91       	pop	r26
 690:	9f 91       	pop	r25
 692:	8f 91       	pop	r24
 694:	7f 91       	pop	r23
 696:	6f 91       	pop	r22
 698:	5f 91       	pop	r21
 69a:	4f 91       	pop	r20
 69c:	3f 91       	pop	r19
 69e:	2f 91       	pop	r18
 6a0:	0f 90       	pop	r0
 6a2:	00 92 5b 00 	sts	0x005B, r0
 6a6:	0f 90       	pop	r0
 6a8:	00 92 5f 00 	sts	0x005F, r0
 6ac:	0f 90       	pop	r0
 6ae:	1f 90       	pop	r1
 6b0:	18 95       	reti

000006b2 <keyPad>:

//--------User defined FSMs--------------------------------
unsigned char Flag;
enum keyStates{keyStart, keyWait, keyOut} keystate;
int keyPad(int state)
{
 6b2:	cf 93       	push	r28
 6b4:	df 93       	push	r29
 6b6:	00 d0       	rcall	.+0      	; 0x6b8 <keyPad+0x6>
 6b8:	1f 92       	push	r1
 6ba:	cd b7       	in	r28, 0x3d	; 61
 6bc:	de b7       	in	r29, 0x3e	; 62
 6be:	9b 83       	std	Y+3, r25	; 0x03
 6c0:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char x;
	
	switch(keystate)
 6c2:	80 91 2a 01 	lds	r24, 0x012A
 6c6:	88 2f       	mov	r24, r24
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	81 30       	cpi	r24, 0x01	; 1
 6cc:	91 05       	cpc	r25, r1
 6ce:	49 f0       	breq	.+18     	; 0x6e2 <keyPad+0x30>
 6d0:	82 30       	cpi	r24, 0x02	; 2
 6d2:	91 05       	cpc	r25, r1
 6d4:	a9 f0       	breq	.+42     	; 0x700 <keyPad+0x4e>
 6d6:	00 97       	sbiw	r24, 0x00	; 0
 6d8:	b9 f4       	brne	.+46     	; 0x708 <keyPad+0x56>
	{
		case keyStart:
		keystate = keyOut;
 6da:	82 e0       	ldi	r24, 0x02	; 2
 6dc:	80 93 2a 01 	sts	0x012A, r24
		break;
 6e0:	13 c0       	rjmp	.+38     	; 0x708 <keyPad+0x56>
		case keyWait:
		x = GetKeypadKey();
 6e2:	3a de       	rcall	.-908    	; 0x358 <GetKeypadKey>
 6e4:	89 83       	std	Y+1, r24	; 0x01
		if(x == '\0')
 6e6:	89 81       	ldd	r24, Y+1	; 0x01
 6e8:	88 23       	and	r24, r24
 6ea:	31 f4       	brne	.+12     	; 0x6f8 <keyPad+0x46>
		{
			keystate = keyWait;
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	80 93 2a 01 	sts	0x012A, r24
			Flag = 0;
 6f2:	10 92 2c 01 	sts	0x012C, r1
		}
		else
		{
			keystate = keyOut;
		}
		break;
 6f6:	08 c0       	rjmp	.+16     	; 0x708 <keyPad+0x56>
			keystate = keyWait;
			Flag = 0;
		}
		else
		{
			keystate = keyOut;
 6f8:	82 e0       	ldi	r24, 0x02	; 2
 6fa:	80 93 2a 01 	sts	0x012A, r24
		}
		break;
 6fe:	04 c0       	rjmp	.+8      	; 0x708 <keyPad+0x56>
		case keyOut:
		keystate = keyWait;
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	80 93 2a 01 	sts	0x012A, r24
		break;
 706:	00 00       	nop
	}
	
	if(!Flag)
 708:	80 91 2c 01 	lds	r24, 0x012C
 70c:	88 23       	and	r24, r24
 70e:	09 f0       	breq	.+2      	; 0x712 <keyPad+0x60>
 710:	98 c0       	rjmp	.+304    	; 0x842 <keyPad+0x190>
	{
		switch(keystate)
 712:	80 91 2a 01 	lds	r24, 0x012A
 716:	88 2f       	mov	r24, r24
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	81 30       	cpi	r24, 0x01	; 1
 71c:	91 05       	cpc	r25, r1
 71e:	09 f4       	brne	.+2      	; 0x722 <keyPad+0x70>
 720:	8d c0       	rjmp	.+282    	; 0x83c <keyPad+0x18a>
 722:	82 30       	cpi	r24, 0x02	; 2
 724:	91 05       	cpc	r25, r1
 726:	09 f0       	breq	.+2      	; 0x72a <keyPad+0x78>
 728:	8b c0       	rjmp	.+278    	; 0x840 <keyPad+0x18e>
			case keyStart:
				break;
			case keyWait:
				break;
			case keyOut:
			LCD_Cursor(1);
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	d1 dd       	rcall	.-1118   	; 0x2d0 <LCD_Cursor>
			x = GetKeypadKey();
 72e:	14 de       	rcall	.-984    	; 0x358 <GetKeypadKey>
 730:	89 83       	std	Y+1, r24	; 0x01
			switch (x) {
 732:	89 81       	ldd	r24, Y+1	; 0x01
 734:	88 2f       	mov	r24, r24
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	aa 27       	eor	r26, r26
 73a:	97 fd       	sbrc	r25, 7
 73c:	a0 95       	com	r26
 73e:	ba 2f       	mov	r27, r26
 740:	40 e0       	ldi	r20, 0x00	; 0
 742:	50 e0       	ldi	r21, 0x00	; 0
 744:	24 e4       	ldi	r18, 0x44	; 68
 746:	30 e0       	ldi	r19, 0x00	; 0
 748:	84 1b       	sub	r24, r20
 74a:	95 0b       	sbc	r25, r21
 74c:	28 17       	cp	r18, r24
 74e:	39 07       	cpc	r19, r25
 750:	08 f4       	brcc	.+2      	; 0x754 <keyPad+0xa2>
 752:	6a c0       	rjmp	.+212    	; 0x828 <keyPad+0x176>
 754:	8a 5b       	subi	r24, 0xBA	; 186
 756:	9f 4f       	sbci	r25, 0xFF	; 255
 758:	fc 01       	movw	r30, r24
 75a:	d1 c1       	rjmp	.+930    	; 0xafe <__tablejump2__>
				// All 5 LEDs on
				case '\0': PORTB = 0x1F; break;
 75c:	85 e2       	ldi	r24, 0x25	; 37
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	2f e1       	ldi	r18, 0x1F	; 31
 762:	fc 01       	movw	r30, r24
 764:	20 83       	st	Z, r18
 766:	66 c0       	rjmp	.+204    	; 0x834 <keyPad+0x182>
				// hex equivalent
				case '1': LCD_WriteData('1'); lastInput = '1';
 768:	81 e3       	ldi	r24, 0x31	; 49
 76a:	84 dd       	rcall	.-1272   	; 0x274 <LCD_WriteData>
 76c:	81 e3       	ldi	r24, 0x31	; 49
 76e:	80 93 29 01 	sts	0x0129, r24
				break;
 772:	60 c0       	rjmp	.+192    	; 0x834 <keyPad+0x182>
				case '2': LCD_WriteData('2'); lastInput = '2';
 774:	82 e3       	ldi	r24, 0x32	; 50
 776:	7e dd       	rcall	.-1284   	; 0x274 <LCD_WriteData>
 778:	82 e3       	ldi	r24, 0x32	; 50
 77a:	80 93 29 01 	sts	0x0129, r24
				break;
 77e:	5a c0       	rjmp	.+180    	; 0x834 <keyPad+0x182>
				case '3': LCD_WriteData('3'); lastInput = '3';
 780:	83 e3       	ldi	r24, 0x33	; 51
 782:	78 dd       	rcall	.-1296   	; 0x274 <LCD_WriteData>
 784:	83 e3       	ldi	r24, 0x33	; 51
 786:	80 93 29 01 	sts	0x0129, r24
				break;
 78a:	54 c0       	rjmp	.+168    	; 0x834 <keyPad+0x182>
				case '4': LCD_WriteData('4'); lastInput = '4';
 78c:	84 e3       	ldi	r24, 0x34	; 52
 78e:	72 dd       	rcall	.-1308   	; 0x274 <LCD_WriteData>
 790:	84 e3       	ldi	r24, 0x34	; 52
 792:	80 93 29 01 	sts	0x0129, r24
				break;
 796:	4e c0       	rjmp	.+156    	; 0x834 <keyPad+0x182>
				case '5': LCD_WriteData('5'); lastInput = '5';
 798:	85 e3       	ldi	r24, 0x35	; 53
 79a:	6c dd       	rcall	.-1320   	; 0x274 <LCD_WriteData>
 79c:	85 e3       	ldi	r24, 0x35	; 53
 79e:	80 93 29 01 	sts	0x0129, r24
				break;
 7a2:	48 c0       	rjmp	.+144    	; 0x834 <keyPad+0x182>
				case '6': LCD_WriteData('6'); lastInput = '6';
 7a4:	86 e3       	ldi	r24, 0x36	; 54
 7a6:	66 dd       	rcall	.-1332   	; 0x274 <LCD_WriteData>
 7a8:	86 e3       	ldi	r24, 0x36	; 54
 7aa:	80 93 29 01 	sts	0x0129, r24
				break;
 7ae:	42 c0       	rjmp	.+132    	; 0x834 <keyPad+0x182>
				case '7': LCD_WriteData('7'); lastInput = '7';
 7b0:	87 e3       	ldi	r24, 0x37	; 55
 7b2:	60 dd       	rcall	.-1344   	; 0x274 <LCD_WriteData>
 7b4:	87 e3       	ldi	r24, 0x37	; 55
 7b6:	80 93 29 01 	sts	0x0129, r24
				break;
 7ba:	3c c0       	rjmp	.+120    	; 0x834 <keyPad+0x182>
				case '8': LCD_WriteData('8'); lastInput = '8';
 7bc:	88 e3       	ldi	r24, 0x38	; 56
 7be:	5a dd       	rcall	.-1356   	; 0x274 <LCD_WriteData>
 7c0:	88 e3       	ldi	r24, 0x38	; 56
 7c2:	80 93 29 01 	sts	0x0129, r24
				break;
 7c6:	36 c0       	rjmp	.+108    	; 0x834 <keyPad+0x182>
				case '9': LCD_WriteData('9'); lastInput = '9';
 7c8:	89 e3       	ldi	r24, 0x39	; 57
 7ca:	54 dd       	rcall	.-1368   	; 0x274 <LCD_WriteData>
 7cc:	89 e3       	ldi	r24, 0x39	; 57
 7ce:	80 93 29 01 	sts	0x0129, r24
				break;
 7d2:	30 c0       	rjmp	.+96     	; 0x834 <keyPad+0x182>
				case 'A': LCD_WriteData('A'); lastInput = 'A';
 7d4:	81 e4       	ldi	r24, 0x41	; 65
 7d6:	4e dd       	rcall	.-1380   	; 0x274 <LCD_WriteData>
 7d8:	81 e4       	ldi	r24, 0x41	; 65
 7da:	80 93 29 01 	sts	0x0129, r24
				break;
 7de:	2a c0       	rjmp	.+84     	; 0x834 <keyPad+0x182>
				case 'B': LCD_WriteData('B'); lastInput = 'B';
 7e0:	82 e4       	ldi	r24, 0x42	; 66
 7e2:	48 dd       	rcall	.-1392   	; 0x274 <LCD_WriteData>
 7e4:	82 e4       	ldi	r24, 0x42	; 66
 7e6:	80 93 29 01 	sts	0x0129, r24
				break;
 7ea:	24 c0       	rjmp	.+72     	; 0x834 <keyPad+0x182>
				case 'C': LCD_WriteData('C'); lastInput = 'C';
 7ec:	83 e4       	ldi	r24, 0x43	; 67
 7ee:	42 dd       	rcall	.-1404   	; 0x274 <LCD_WriteData>
 7f0:	83 e4       	ldi	r24, 0x43	; 67
 7f2:	80 93 29 01 	sts	0x0129, r24
				break;
 7f6:	1e c0       	rjmp	.+60     	; 0x834 <keyPad+0x182>
				case 'D': LCD_WriteData('D'); lastInput = 'D';
 7f8:	84 e4       	ldi	r24, 0x44	; 68
 7fa:	3c dd       	rcall	.-1416   	; 0x274 <LCD_WriteData>
 7fc:	84 e4       	ldi	r24, 0x44	; 68
 7fe:	80 93 29 01 	sts	0x0129, r24
				break;
 802:	18 c0       	rjmp	.+48     	; 0x834 <keyPad+0x182>
				case '*': LCD_WriteData('*'); lastInput = '*';
 804:	8a e2       	ldi	r24, 0x2A	; 42
 806:	36 dd       	rcall	.-1428   	; 0x274 <LCD_WriteData>
 808:	8a e2       	ldi	r24, 0x2A	; 42
 80a:	80 93 29 01 	sts	0x0129, r24
				break;
 80e:	12 c0       	rjmp	.+36     	; 0x834 <keyPad+0x182>
				case '0': LCD_WriteData('0'); lastInput = '0';
 810:	80 e3       	ldi	r24, 0x30	; 48
 812:	30 dd       	rcall	.-1440   	; 0x274 <LCD_WriteData>
 814:	80 e3       	ldi	r24, 0x30	; 48
 816:	80 93 29 01 	sts	0x0129, r24
				break;
 81a:	0c c0       	rjmp	.+24     	; 0x834 <keyPad+0x182>
				case '#': LCD_WriteData('#'); lastInput = '#';
 81c:	83 e2       	ldi	r24, 0x23	; 35
 81e:	2a dd       	rcall	.-1452   	; 0x274 <LCD_WriteData>
 820:	83 e2       	ldi	r24, 0x23	; 35
 822:	80 93 29 01 	sts	0x0129, r24
				break;
 826:	06 c0       	rjmp	.+12     	; 0x834 <keyPad+0x182>
				// Should never occur. Middle LED off.
				default: PORTB = 0x1B; break;
 828:	85 e2       	ldi	r24, 0x25	; 37
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	2b e1       	ldi	r18, 0x1B	; 27
 82e:	fc 01       	movw	r30, r24
 830:	20 83       	st	Z, r18
 832:	00 00       	nop
			}
			Flag = 1;
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	80 93 2c 01 	sts	0x012C, r24
			break;
 83a:	03 c0       	rjmp	.+6      	; 0x842 <keyPad+0x190>
		switch(keystate)
		{
			case keyStart:
				break;
			case keyWait:
				break;
 83c:	00 00       	nop
 83e:	01 c0       	rjmp	.+2      	; 0x842 <keyPad+0x190>
	if(!Flag)
	{
		switch(keystate)
		{
			case keyStart:
				break;
 840:	00 00       	nop
			Flag = 1;
			break;
		}
	}
	
	return keystate;
 842:	80 91 2a 01 	lds	r24, 0x012A
 846:	88 2f       	mov	r24, r24
 848:	90 e0       	ldi	r25, 0x00	; 0
}
 84a:	0f 90       	pop	r0
 84c:	0f 90       	pop	r0
 84e:	0f 90       	pop	r0
 850:	df 91       	pop	r29
 852:	cf 91       	pop	r28
 854:	08 95       	ret

00000856 <menus>:


enum menusStates{menuStart, startscreen, gameconfigscreen, playscreen, back} menustate;
int menus(int state)
{
 856:	cf 93       	push	r28
 858:	df 93       	push	r29
 85a:	00 d0       	rcall	.+0      	; 0x85c <menus+0x6>
 85c:	cd b7       	in	r28, 0x3d	; 61
 85e:	de b7       	in	r29, 0x3e	; 62
 860:	9a 83       	std	Y+2, r25	; 0x02
 862:	89 83       	std	Y+1, r24	; 0x01
	return menustate;
 864:	80 91 2b 01 	lds	r24, 0x012B
 868:	88 2f       	mov	r24, r24
 86a:	90 e0       	ldi	r25, 0x00	; 0
}
 86c:	0f 90       	pop	r0
 86e:	0f 90       	pop	r0
 870:	df 91       	pop	r29
 872:	cf 91       	pop	r28
 874:	08 95       	ret

00000876 <main>:

// Implement scheduler code from PES.
int main()
{
 876:	0f 93       	push	r16
 878:	1f 93       	push	r17
 87a:	cf 93       	push	r28
 87c:	df 93       	push	r29
 87e:	cd b7       	in	r28, 0x3d	; 61
 880:	de b7       	in	r29, 0x3e	; 62
 882:	60 97       	sbiw	r28, 0x10	; 16
 884:	0f b6       	in	r0, 0x3f	; 63
 886:	f8 94       	cli
 888:	de bf       	out	0x3e, r29	; 62
 88a:	0f be       	out	0x3f, r0	; 63
 88c:	cd bf       	out	0x3d, r28	; 61
	//srand(time(NULL));
	
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA
	// to pull down logic
	DDRA = 0xFF; PORTA = 0x00;
 88e:	81 e2       	ldi	r24, 0x21	; 33
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	2f ef       	ldi	r18, 0xFF	; 255
 894:	fc 01       	movw	r30, r24
 896:	20 83       	st	Z, r18
 898:	82 e2       	ldi	r24, 0x22	; 34
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	fc 01       	movw	r30, r24
 89e:	10 82       	st	Z, r1
	DDRB = 0xFF; PORTB = 0x00;
 8a0:	84 e2       	ldi	r24, 0x24	; 36
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	2f ef       	ldi	r18, 0xFF	; 255
 8a6:	fc 01       	movw	r30, r24
 8a8:	20 83       	st	Z, r18
 8aa:	85 e2       	ldi	r24, 0x25	; 37
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	fc 01       	movw	r30, r24
 8b0:	10 82       	st	Z, r1
	DDRC = 0xF0; PORTC = 0x0F;
 8b2:	87 e2       	ldi	r24, 0x27	; 39
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	20 ef       	ldi	r18, 0xF0	; 240
 8b8:	fc 01       	movw	r30, r24
 8ba:	20 83       	st	Z, r18
 8bc:	88 e2       	ldi	r24, 0x28	; 40
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	2f e0       	ldi	r18, 0x0F	; 15
 8c2:	fc 01       	movw	r30, r24
 8c4:	20 83       	st	Z, r18
	DDRD = 0xFF; PORTD = 0x00;
 8c6:	8a e2       	ldi	r24, 0x2A	; 42
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	2f ef       	ldi	r18, 0xFF	; 255
 8cc:	fc 01       	movw	r30, r24
 8ce:	20 83       	st	Z, r18
 8d0:	8b e2       	ldi	r24, 0x2B	; 43
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	fc 01       	movw	r30, r24
 8d6:	10 82       	st	Z, r1
	
	LCD_init();
 8d8:	8a dc       	rcall	.-1772   	; 0x1ee <LCD_init>
	
	Flag = 0;
 8da:	10 92 2c 01 	sts	0x012C, r1
	
	// Period for the tasks
	unsigned long int keyPad_period = 1;
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	a0 e0       	ldi	r26, 0x00	; 0
 8e4:	b0 e0       	ldi	r27, 0x00	; 0
 8e6:	8b 83       	std	Y+3, r24	; 0x03
 8e8:	9c 83       	std	Y+4, r25	; 0x04
 8ea:	ad 83       	std	Y+5, r26	; 0x05
 8ec:	be 83       	std	Y+6, r27	; 0x06
	unsigned long int menus_period = 1;
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	a0 e0       	ldi	r26, 0x00	; 0
 8f4:	b0 e0       	ldi	r27, 0x00	; 0
 8f6:	8f 83       	std	Y+7, r24	; 0x07
 8f8:	98 87       	std	Y+8, r25	; 0x08
 8fa:	a9 87       	std	Y+9, r26	; 0x09
 8fc:	ba 87       	std	Y+10, r27	; 0x0a
	
	//Declare an array of tasks
	static task task1, task2;
	task *tasks[] = {&task1, &task2};
 8fe:	83 e1       	ldi	r24, 0x13	; 19
 900:	91 e0       	ldi	r25, 0x01	; 1
 902:	9e 87       	std	Y+14, r25	; 0x0e
 904:	8d 87       	std	Y+13, r24	; 0x0d
 906:	8e e1       	ldi	r24, 0x1E	; 30
 908:	91 e0       	ldi	r25, 0x01	; 1
 90a:	98 8b       	std	Y+16, r25	; 0x10
 90c:	8f 87       	std	Y+15, r24	; 0x0f
	const unsigned short numTasks = sizeof(tasks) / sizeof(task*);
 90e:	82 e0       	ldi	r24, 0x02	; 2
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	9c 87       	std	Y+12, r25	; 0x0c
 914:	8b 87       	std	Y+11, r24	; 0x0b
	
	// Task 1
	task1.state = keyStart;
 916:	10 92 13 01 	sts	0x0113, r1
	task1.period = keyPad_period;
 91a:	8b 81       	ldd	r24, Y+3	; 0x03
 91c:	9c 81       	ldd	r25, Y+4	; 0x04
 91e:	ad 81       	ldd	r26, Y+5	; 0x05
 920:	be 81       	ldd	r27, Y+6	; 0x06
 922:	80 93 14 01 	sts	0x0114, r24
 926:	90 93 15 01 	sts	0x0115, r25
 92a:	a0 93 16 01 	sts	0x0116, r26
 92e:	b0 93 17 01 	sts	0x0117, r27
	task1.elapsedTime = keyPad_period;
 932:	8b 81       	ldd	r24, Y+3	; 0x03
 934:	9c 81       	ldd	r25, Y+4	; 0x04
 936:	ad 81       	ldd	r26, Y+5	; 0x05
 938:	be 81       	ldd	r27, Y+6	; 0x06
 93a:	80 93 18 01 	sts	0x0118, r24
 93e:	90 93 19 01 	sts	0x0119, r25
 942:	a0 93 1a 01 	sts	0x011A, r26
 946:	b0 93 1b 01 	sts	0x011B, r27
	task1.TickFct = &keyPad;
 94a:	89 e5       	ldi	r24, 0x59	; 89
 94c:	93 e0       	ldi	r25, 0x03	; 3
 94e:	90 93 1d 01 	sts	0x011D, r25
 952:	80 93 1c 01 	sts	0x011C, r24
	
	//Task 2
	task2.state = menuStart;
 956:	10 92 1e 01 	sts	0x011E, r1
	task2.period = menus_period;
 95a:	8f 81       	ldd	r24, Y+7	; 0x07
 95c:	98 85       	ldd	r25, Y+8	; 0x08
 95e:	a9 85       	ldd	r26, Y+9	; 0x09
 960:	ba 85       	ldd	r27, Y+10	; 0x0a
 962:	80 93 1f 01 	sts	0x011F, r24
 966:	90 93 20 01 	sts	0x0120, r25
 96a:	a0 93 21 01 	sts	0x0121, r26
 96e:	b0 93 22 01 	sts	0x0122, r27
	task2.elapsedTime = menus_period;
 972:	8f 81       	ldd	r24, Y+7	; 0x07
 974:	98 85       	ldd	r25, Y+8	; 0x08
 976:	a9 85       	ldd	r26, Y+9	; 0x09
 978:	ba 85       	ldd	r27, Y+10	; 0x0a
 97a:	80 93 23 01 	sts	0x0123, r24
 97e:	90 93 24 01 	sts	0x0124, r25
 982:	a0 93 25 01 	sts	0x0125, r26
 986:	b0 93 26 01 	sts	0x0126, r27
	task2.TickFct = &menus;
 98a:	8b e2       	ldi	r24, 0x2B	; 43
 98c:	94 e0       	ldi	r25, 0x04	; 4
 98e:	90 93 28 01 	sts	0x0128, r25
 992:	80 93 27 01 	sts	0x0127, r24
	//Task 3
	
	// Set the timer and turn it on
	TimerSet(1);
 996:	61 e0       	ldi	r22, 0x01	; 1
 998:	70 e0       	ldi	r23, 0x00	; 0
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	bc dd       	rcall	.-1160   	; 0x518 <TimerSet>
	TimerOn();
 9a0:	e8 dd       	rcall	.-1072   	; 0x572 <TimerOn>
	
	// Scheduler for-loop iterator
	unsigned short i;
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 9a2:	1a 82       	std	Y+2, r1	; 0x02
 9a4:	19 82       	std	Y+1, r1	; 0x01
 9a6:	9b c0       	rjmp	.+310    	; 0xade <main+0x268>
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 9a8:	89 81       	ldd	r24, Y+1	; 0x01
 9aa:	9a 81       	ldd	r25, Y+2	; 0x02
 9ac:	88 0f       	add	r24, r24
 9ae:	99 1f       	adc	r25, r25
 9b0:	9e 01       	movw	r18, r28
 9b2:	2f 5f       	subi	r18, 0xFF	; 255
 9b4:	3f 4f       	sbci	r19, 0xFF	; 255
 9b6:	82 0f       	add	r24, r18
 9b8:	93 1f       	adc	r25, r19
 9ba:	0c 96       	adiw	r24, 0x0c	; 12
 9bc:	fc 01       	movw	r30, r24
 9be:	80 81       	ld	r24, Z
 9c0:	91 81       	ldd	r25, Z+1	; 0x01
 9c2:	fc 01       	movw	r30, r24
 9c4:	25 81       	ldd	r18, Z+5	; 0x05
 9c6:	36 81       	ldd	r19, Z+6	; 0x06
 9c8:	47 81       	ldd	r20, Z+7	; 0x07
 9ca:	50 85       	ldd	r21, Z+8	; 0x08
 9cc:	89 81       	ldd	r24, Y+1	; 0x01
 9ce:	9a 81       	ldd	r25, Y+2	; 0x02
 9d0:	88 0f       	add	r24, r24
 9d2:	99 1f       	adc	r25, r25
 9d4:	be 01       	movw	r22, r28
 9d6:	6f 5f       	subi	r22, 0xFF	; 255
 9d8:	7f 4f       	sbci	r23, 0xFF	; 255
 9da:	86 0f       	add	r24, r22
 9dc:	97 1f       	adc	r25, r23
 9de:	0c 96       	adiw	r24, 0x0c	; 12
 9e0:	fc 01       	movw	r30, r24
 9e2:	80 81       	ld	r24, Z
 9e4:	91 81       	ldd	r25, Z+1	; 0x01
 9e6:	fc 01       	movw	r30, r24
 9e8:	81 81       	ldd	r24, Z+1	; 0x01
 9ea:	92 81       	ldd	r25, Z+2	; 0x02
 9ec:	a3 81       	ldd	r26, Z+3	; 0x03
 9ee:	b4 81       	ldd	r27, Z+4	; 0x04
 9f0:	28 17       	cp	r18, r24
 9f2:	39 07       	cpc	r19, r25
 9f4:	4a 07       	cpc	r20, r26
 9f6:	5b 07       	cpc	r21, r27
 9f8:	09 f0       	breq	.+2      	; 0x9fc <main+0x186>
 9fa:	45 c0       	rjmp	.+138    	; 0xa86 <main+0x210>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 9fc:	89 81       	ldd	r24, Y+1	; 0x01
 9fe:	9a 81       	ldd	r25, Y+2	; 0x02
 a00:	88 0f       	add	r24, r24
 a02:	99 1f       	adc	r25, r25
 a04:	9e 01       	movw	r18, r28
 a06:	2f 5f       	subi	r18, 0xFF	; 255
 a08:	3f 4f       	sbci	r19, 0xFF	; 255
 a0a:	82 0f       	add	r24, r18
 a0c:	93 1f       	adc	r25, r19
 a0e:	0c 96       	adiw	r24, 0x0c	; 12
 a10:	fc 01       	movw	r30, r24
 a12:	00 81       	ld	r16, Z
 a14:	11 81       	ldd	r17, Z+1	; 0x01
 a16:	89 81       	ldd	r24, Y+1	; 0x01
 a18:	9a 81       	ldd	r25, Y+2	; 0x02
 a1a:	88 0f       	add	r24, r24
 a1c:	99 1f       	adc	r25, r25
 a1e:	9e 01       	movw	r18, r28
 a20:	2f 5f       	subi	r18, 0xFF	; 255
 a22:	3f 4f       	sbci	r19, 0xFF	; 255
 a24:	82 0f       	add	r24, r18
 a26:	93 1f       	adc	r25, r19
 a28:	0c 96       	adiw	r24, 0x0c	; 12
 a2a:	fc 01       	movw	r30, r24
 a2c:	80 81       	ld	r24, Z
 a2e:	91 81       	ldd	r25, Z+1	; 0x01
 a30:	fc 01       	movw	r30, r24
 a32:	21 85       	ldd	r18, Z+9	; 0x09
 a34:	32 85       	ldd	r19, Z+10	; 0x0a
 a36:	89 81       	ldd	r24, Y+1	; 0x01
 a38:	9a 81       	ldd	r25, Y+2	; 0x02
 a3a:	88 0f       	add	r24, r24
 a3c:	99 1f       	adc	r25, r25
 a3e:	ae 01       	movw	r20, r28
 a40:	4f 5f       	subi	r20, 0xFF	; 255
 a42:	5f 4f       	sbci	r21, 0xFF	; 255
 a44:	84 0f       	add	r24, r20
 a46:	95 1f       	adc	r25, r21
 a48:	0c 96       	adiw	r24, 0x0c	; 12
 a4a:	fc 01       	movw	r30, r24
 a4c:	80 81       	ld	r24, Z
 a4e:	91 81       	ldd	r25, Z+1	; 0x01
 a50:	fc 01       	movw	r30, r24
 a52:	80 81       	ld	r24, Z
 a54:	99 27       	eor	r25, r25
 a56:	87 fd       	sbrc	r24, 7
 a58:	90 95       	com	r25
 a5a:	f9 01       	movw	r30, r18
 a5c:	09 95       	icall
 a5e:	f8 01       	movw	r30, r16
 a60:	80 83       	st	Z, r24
				// Reset elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 a62:	89 81       	ldd	r24, Y+1	; 0x01
 a64:	9a 81       	ldd	r25, Y+2	; 0x02
 a66:	88 0f       	add	r24, r24
 a68:	99 1f       	adc	r25, r25
 a6a:	9e 01       	movw	r18, r28
 a6c:	2f 5f       	subi	r18, 0xFF	; 255
 a6e:	3f 4f       	sbci	r19, 0xFF	; 255
 a70:	82 0f       	add	r24, r18
 a72:	93 1f       	adc	r25, r19
 a74:	0c 96       	adiw	r24, 0x0c	; 12
 a76:	fc 01       	movw	r30, r24
 a78:	80 81       	ld	r24, Z
 a7a:	91 81       	ldd	r25, Z+1	; 0x01
 a7c:	fc 01       	movw	r30, r24
 a7e:	15 82       	std	Z+5, r1	; 0x05
 a80:	16 82       	std	Z+6, r1	; 0x06
 a82:	17 82       	std	Z+7, r1	; 0x07
 a84:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
 a86:	89 81       	ldd	r24, Y+1	; 0x01
 a88:	9a 81       	ldd	r25, Y+2	; 0x02
 a8a:	88 0f       	add	r24, r24
 a8c:	99 1f       	adc	r25, r25
 a8e:	9e 01       	movw	r18, r28
 a90:	2f 5f       	subi	r18, 0xFF	; 255
 a92:	3f 4f       	sbci	r19, 0xFF	; 255
 a94:	82 0f       	add	r24, r18
 a96:	93 1f       	adc	r25, r19
 a98:	0c 96       	adiw	r24, 0x0c	; 12
 a9a:	fc 01       	movw	r30, r24
 a9c:	20 81       	ld	r18, Z
 a9e:	31 81       	ldd	r19, Z+1	; 0x01
 aa0:	89 81       	ldd	r24, Y+1	; 0x01
 aa2:	9a 81       	ldd	r25, Y+2	; 0x02
 aa4:	88 0f       	add	r24, r24
 aa6:	99 1f       	adc	r25, r25
 aa8:	ae 01       	movw	r20, r28
 aaa:	4f 5f       	subi	r20, 0xFF	; 255
 aac:	5f 4f       	sbci	r21, 0xFF	; 255
 aae:	84 0f       	add	r24, r20
 ab0:	95 1f       	adc	r25, r21
 ab2:	0c 96       	adiw	r24, 0x0c	; 12
 ab4:	fc 01       	movw	r30, r24
 ab6:	80 81       	ld	r24, Z
 ab8:	91 81       	ldd	r25, Z+1	; 0x01
 aba:	fc 01       	movw	r30, r24
 abc:	85 81       	ldd	r24, Z+5	; 0x05
 abe:	96 81       	ldd	r25, Z+6	; 0x06
 ac0:	a7 81       	ldd	r26, Z+7	; 0x07
 ac2:	b0 85       	ldd	r27, Z+8	; 0x08
 ac4:	01 96       	adiw	r24, 0x01	; 1
 ac6:	a1 1d       	adc	r26, r1
 ac8:	b1 1d       	adc	r27, r1
 aca:	f9 01       	movw	r30, r18
 acc:	85 83       	std	Z+5, r24	; 0x05
 ace:	96 83       	std	Z+6, r25	; 0x06
 ad0:	a7 83       	std	Z+7, r26	; 0x07
 ad2:	b0 87       	std	Z+8, r27	; 0x08
	
	// Scheduler for-loop iterator
	unsigned short i;
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 ad4:	89 81       	ldd	r24, Y+1	; 0x01
 ad6:	9a 81       	ldd	r25, Y+2	; 0x02
 ad8:	01 96       	adiw	r24, 0x01	; 1
 ada:	9a 83       	std	Y+2, r25	; 0x02
 adc:	89 83       	std	Y+1, r24	; 0x01
 ade:	29 81       	ldd	r18, Y+1	; 0x01
 ae0:	3a 81       	ldd	r19, Y+2	; 0x02
 ae2:	8b 85       	ldd	r24, Y+11	; 0x0b
 ae4:	9c 85       	ldd	r25, Y+12	; 0x0c
 ae6:	28 17       	cp	r18, r24
 ae8:	39 07       	cpc	r19, r25
 aea:	08 f4       	brcc	.+2      	; 0xaee <main+0x278>
 aec:	5d cf       	rjmp	.-326    	; 0x9a8 <main+0x132>
				// Reset elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 aee:	00 00       	nop
 af0:	80 91 0e 01 	lds	r24, 0x010E
 af4:	88 23       	and	r24, r24
 af6:	e1 f3       	breq	.-8      	; 0xaf0 <main+0x27a>
		TimerFlag = 0;
 af8:	10 92 0e 01 	sts	0x010E, r1
	}
 afc:	52 cf       	rjmp	.-348    	; 0x9a2 <main+0x12c>

00000afe <__tablejump2__>:
 afe:	ee 0f       	add	r30, r30
 b00:	ff 1f       	adc	r31, r31

00000b02 <__tablejump__>:
 b02:	05 90       	lpm	r0, Z+
 b04:	f4 91       	lpm	r31, Z
 b06:	e0 2d       	mov	r30, r0
 b08:	09 94       	ijmp

00000b0a <_exit>:
 b0a:	f8 94       	cli

00000b0c <__stop_program>:
 b0c:	ff cf       	rjmp	.-2      	; 0xb0c <__stop_program>
